.TH "dcmcrle" 1 "20 Dec 2005" "Version Version 3.5.4" "OFFIS DCMTK" \" -*- nroff -*-
.nh
.SH NAME
dcmcrle \- Encode DICOM file to RLE transfer syntax
.SH "SYNOPSIS"
.PP
.PP
.nf

dcmcrle [options] dcmfile-in dcmfile-out
.fi
.PP
.SH "DESCRIPTION"
.PP
The \fBdcmcrle\fP utility reads an uncompressed DICOM image (\fIdicomfile-in\fP), performs RLE compression (i.e. conversion to an encapsulated DICOM transfer syntax) and writes the converted image to an output file (\fIdicomfile-out\fP).
.SH "PARAMETERS"
.PP
.PP
.nf

dcmfile-in   DICOM input filename to be converted

dcmfile-out  DICOM output filename
.fi
.PP
.SH "OPTIONS"
.PP
.SS "general options"
.PP
.nf

  -h   --help
         print this help text and exit

       --version
         print version information and exit

  -v   --verbose
         verbose mode, print processing details

  -d   --debug
         debug mode, print debug information
.fi
.PP
.SS "input options"
.PP
.nf

input file format:

  +f   --read-file
         read file format or data set (default)

  +fo  --read-file-only
         read file format only

  -f   --read-dataset
         read data set without file meta information

input transfer syntax:

  -t=  --read-xfer-auto
         use TS recognition (default)

  -td  --read-xfer-detect
         ignore TS specified in the file meta header

  -te  --read-xfer-little
         read with explicit VR little endian TS

  -tb  --read-xfer-big
         read with explicit VR big endian TS

  -ti  --read-xfer-implicit
         read with implicit VR little endian TS
.fi
.PP
.SS "encapsulated pixel data encoding options"
.PP
.nf

pixel data fragmentation options:

  +ff  --fragment-per-frame
         encode each frame as one fragment (default)

  +fs  --fragment-size  [s]ize: integer
         limit fragment size to s kbytes (non-standard)

basic offset table encoding options:

  +ot  --offset-table-create
         create offset table (default)

  -ot  --offset-table-empty
         leave offset table empty

SOP Class UID options:

  +cd  --class-default
         keep SOP Class UID (default)

  +cs  --class-sc
         convert to Secondary Capture Image (implies --uid-always)

SOP Instance UID options:
  +un  --uid-never
         never assign new UID (default)

  +ua  --uid-always
         always assign new UID
.fi
.PP
.SS "output options"
.PP
.nf

post-1993 value representations:

  +u   --enable-new-vr
         enable support for new VRs (UN/UT) (default)

  -u   --disable-new-vr
         disable support for new VRs, convert to OB

group length encoding:

  +g=  --group-length-recalc
         recalculate group lengths if present (default)

  +g   --group-length-create
         always write with group length elements

  -g   --group-length-remove
         always write without group length elements

length encoding in sequences and items:

  +e   --length-explicit
         write with explicit lengths (default)

  -e   --length-undefined
         write with undefined lengths

data set trailing padding:

  -p=  --padding-retain
         do not change padding (default)

  -p   --padding-off
         no padding

  +p   --padding-create  [f]ile-pad [i]tem-pad: integer
         align file on multiple of f bytes
         and items on multiple of i bytes
.fi
.PP
.SH "COMMAND LINE"
.PP
All command line tools use the following notation for parameters: square brackets enclose optional values (0-1), three trailing dots indicate that multiple values are allowed (1-n), a combination of both means 0 to n values.
.PP
Command line options are distinguished from parameters by a leading '+' or '-' sign, respectively. Usually, order and position of command line options are arbitrary (i.e. they can appear anywhere). However, if options are mutually exclusive the rightmost appearance is used. This behaviour conforms to the standard evaluation rules of common Unix shells.
.PP
In addition, one or more command files can be specified using an '@' sign as a prefix to the filename (e.g. \fI@command.txt\fP). Such a command argument is replaced by the content of the corresponding text file (multiple whitespaces are treated as a single separator) prior to any further evaluation. Please note that a command file cannot contain another command file. This simple but effective approach allows to summarize common combinations of options/parameters and avoids longish and confusing command lines (an example is provided in file \fIshare/data/dumppat.txt\fP).
.SH "ENVIRONMENT"
.PP
The \fBdcmcrle\fP utility will attempt to load DICOM data dictionaries specified in the \fIDCMDICTPATH\fP environment variable. By default, i.e. if the \fIDCMDICTPATH\fP environment variable is not set, the file \fI<PREFIX>/lib/dicom.dic\fP will be loaded unless the dictionary is built into the application (default for Windows).
.PP
The default behaviour should be preferred and the \fIDCMDICTPATH\fP environment variable only used when alternative data dictionaries are required. The \fIDCMDICTPATH\fP environment variable has the same format as the Unix shell \fIPATH\fP variable in that a colon (':') separates entries. The data dictionary code will attempt to load each file specified in the \fIDCMDICTPATH\fP environment variable. It is an error if no data dictionary can be loaded.
.SH "SEE ALSO"
.PP
\fBdcmdrle\fP(1)
.SH "COPYRIGHT"
.PP
Copyright (C) 2002-2005 by Kuratorium OFFIS e.V., Escherweg 2, 26121 Oldenburg, Germany. 
